import express, { Request, Response } from 'express'
import bodyParser from 'body-parser'
import path from 'path'

const API_SECRET_KEY = 'c12dxx-13123-xx1952-xx1x'

interface Task {
  id: number;
  title: string;
  description: string;
}

let tasks: Task[] = []
let taskIdCounter = 1

const app = express()
const port = process.env.PORT || 3000

// Serve the front-end HTML file
app.get('/', (req: Request, res: Response) => {
  res.sendFile(path.join(__dirname, '../public/index.html'))
})

// Serve the static files (CSS and client-side JavaScript)
app.use(express.static(path.join(__dirname, '../public')))

app.use(bodyParser.json())

// GET /tasks - get a list of all tasks
app.get('/tasks', (req: Request, res: Response) => {
  res.json(tasks)
})

// POST /tasks - create a new task
app.post('/tasks', (req: Request, res: Response) => {
  const { title, description }: { title: string, description: string } = req.body
  const newTask: Task = {
    id: taskIdCounter++,
    title,
    description,
  }
  tasks.push(newTask)
  res.json(newTask)
})

// PUT /tasks/:id - update an existing task by ID
app.put('/tasks/:id', (req: Request, res: Response) => {
  const id: number = parseInt(req.params.id, 10)
  const { title, description }: { title: string, description: string } = req.body
  const taskIndex: number = tasks.findIndex((task: Task) => task.id === id)
  if (taskIndex !== -1) {
    tasks[taskIndex].title = title
    tasks[taskIndex].description = description
    res.json(tasks[taskIndex])
  } else {
    res.status(404).send('Task not found')
  }
})

// DELETE /tasks/:id - delete an existing task by ID
app.delete('/tasks/:id', (req: Request, res: Response) => {
  const id: number = parseInt(req.params.id, 10)
  const taskIndex: number = tasks.findIndex((task: Task) => task.id === id)
  if (taskIndex !== -1) {
    tasks.splice(taskIndex, 1)
    res.sendStatus(204)
  } else {
    res.status(404).send('Task not found')
  }
})

app.listen(port, () => {
  console.log(`Server listening on port ${port}`)
})
